{"version":3,"file":"rrweb-record-pack.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/rrweb-snapshot/es/rrweb-snapshot.js","../../src/types.ts","../../node_modules/pako/dist/pako_deflate.js","../../src/packer/pack.ts","../../src/packer/base.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","var NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\nvar _id = 1;\nvar symbolAndNumberRegex = RegExp('[^a-z1-6-]');\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(tagName) {\n    var processedTagName = tagName.toLowerCase().trim();\n    if (symbolAndNumberRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction getCssRulesString(s) {\n    try {\n        var rules = s.rules || s.cssRules;\n        return rules\n            ? Array.from(rules).reduce(function (prev, cur) { return prev + getCssRuleString(cur); }, '')\n            : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction getCssRuleString(rule) {\n    return isCSSImportRule(rule)\n        ? getCssRulesString(rule.styleSheet) || ''\n        : rule.cssText;\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction extractOrigin(url) {\n    var origin;\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nvar URL_IN_CSS_REF = /url\\((?:'([^']*)'|\"([^\"]*)\"|([^)]*))\\)/gm;\nvar RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/).*/;\nvar DATA_URI = /^(data:)([\\w\\/\\+\\-]+);(charset=[\\w-]+|base64).*,(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, function (origin, path1, path2, path3) {\n        var filePath = path1 || path2 || path3;\n        if (!filePath) {\n            return origin;\n        }\n        if (!RELATIVE_PATH.test(filePath)) {\n            return \"url('\" + filePath + \"')\";\n        }\n        if (DATA_URI.test(filePath)) {\n            return \"url(\" + filePath + \")\";\n        }\n        if (filePath[0] === '/') {\n            return \"url('\" + (extractOrigin(href) + filePath) + \"')\";\n        }\n        var stack = href.split('/');\n        var parts = filePath.split('/');\n        stack.pop();\n        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n            var part = parts_1[_i];\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return \"url('\" + stack.join('/') + \"')\";\n    });\n}\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    var srcsetValues = attributeValue.split(',');\n    var resultingSrcsetString = srcsetValues\n        .map(function (srcItem) {\n        var trimmedSrcItem = srcItem.trimLeft().trimRight();\n        var urlAndSize = trimmedSrcItem.split(' ');\n        if (urlAndSize.length === 2) {\n            var absUrl = absoluteToDoc(doc, urlAndSize[0]);\n            return absUrl + \" \" + urlAndSize[1];\n        }\n        else if (urlAndSize.length === 1) {\n            var absUrl = absoluteToDoc(doc, urlAndSize[0]);\n            return \"\" + absUrl;\n        }\n        return '';\n    })\n        .join(',');\n    return resultingSrcsetString;\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    var a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return el.tagName === 'svg' || el instanceof SVGElement;\n}\nfunction transformAttribute(doc, name, value) {\n    if (name === 'src' || (name === 'href' && value)) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset' && value) {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style' && value) {\n        return absoluteToStylesheet(value, location.href);\n    }\n    else {\n        return value;\n    }\n}\nfunction serializeNode(n, doc, blockClass, inlineStylesheet, maskInputOptions) {\n    if (maskInputOptions === void 0) { maskInputOptions = {}; }\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            return {\n                type: NodeType.Document,\n                childNodes: []\n            };\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId\n            };\n        case n.ELEMENT_NODE:\n            var needBlock_1 = false;\n            if (typeof blockClass === 'string') {\n                needBlock_1 = n.classList.contains(blockClass);\n            }\n            else {\n                n.classList.forEach(function (className) {\n                    if (blockClass.test(className)) {\n                        needBlock_1 = true;\n                    }\n                });\n            }\n            var tagName = getValidTagName(n.tagName);\n            var attributes_1 = {};\n            for (var _i = 0, _a = Array.from(n.attributes); _i < _a.length; _i++) {\n                var _b = _a[_i], name = _b.name, value = _b.value;\n                attributes_1[name] = transformAttribute(doc, name, value);\n            }\n            if (tagName === 'link' && inlineStylesheet) {\n                var stylesheet = Array.from(doc.styleSheets).find(function (s) {\n                    return s.href === n.href;\n                });\n                var cssText = getCssRulesString(stylesheet);\n                if (cssText) {\n                    delete attributes_1.rel;\n                    delete attributes_1.href;\n                    attributes_1._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n                }\n            }\n            if (tagName === 'style' &&\n                n.sheet &&\n                !(n.innerText ||\n                    n.textContent ||\n                    '').trim().length) {\n                var cssText = getCssRulesString(n.sheet);\n                if (cssText) {\n                    attributes_1._cssText = absoluteToStylesheet(cssText, location.href);\n                }\n            }\n            if (tagName === 'input' ||\n                tagName === 'textarea' ||\n                tagName === 'select') {\n                var value = n.value;\n                var needBlockTextarea = tagName === 'textarea' && maskInputOptions.textarea;\n                if (attributes_1.type !== 'radio' &&\n                    attributes_1.type !== 'checkbox' &&\n                    attributes_1.type !== 'submit' &&\n                    attributes_1.type !== 'button' &&\n                    value) {\n                    attributes_1.value =\n                        maskInputOptions[attributes_1.type] ||\n                            needBlockTextarea\n                            ? '*'.repeat(value.length)\n                            : value;\n                }\n                else if (n.checked) {\n                    attributes_1.checked = n.checked;\n                }\n            }\n            if (tagName === 'option') {\n                var selectValue = n.parentElement;\n                if (attributes_1.value === selectValue.value) {\n                    attributes_1.selected = n.selected;\n                }\n            }\n            if (tagName === 'canvas') {\n                attributes_1.rr_dataURL = n.toDataURL();\n            }\n            if (tagName === 'audio' || tagName === 'video') {\n                attributes_1.rr_mediaState = n.paused\n                    ? 'paused'\n                    : 'played';\n            }\n            if (needBlock_1) {\n                var _c = n.getBoundingClientRect(), width = _c.width, height = _c.height;\n                attributes_1.rr_width = width + \"px\";\n                attributes_1.rr_height = height + \"px\";\n            }\n            return {\n                type: NodeType.Element,\n                tagName: tagName,\n                attributes: attributes_1,\n                childNodes: [],\n                isSVG: isSVGElement(n) || undefined,\n                needBlock: needBlock_1\n            };\n        case n.TEXT_NODE:\n            var parentTagName = n.parentNode && n.parentNode.tagName;\n            var textContent = n.textContent;\n            var isStyle = parentTagName === 'STYLE' ? true : undefined;\n            if (isStyle && textContent) {\n                textContent = absoluteToStylesheet(textContent, location.href);\n            }\n            if (parentTagName === 'SCRIPT') {\n                textContent = 'SCRIPT_PLACEHOLDER';\n            }\n            return {\n                type: NodeType.Text,\n                textContent: textContent || '',\n                isStyle: isStyle\n            };\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType.CDATA,\n                textContent: ''\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType.Comment,\n                textContent: n.textContent || ''\n            };\n        default:\n            return false;\n    }\n}\nfunction serializeNodeWithId(n, doc, map, blockClass, skipChild, inlineStylesheet, maskInputOptions) {\n    if (skipChild === void 0) { skipChild = false; }\n    if (inlineStylesheet === void 0) { inlineStylesheet = true; }\n    var _serializedNode = serializeNode(n, doc, blockClass, inlineStylesheet, maskInputOptions);\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    var id;\n    if ('__sn' in n) {\n        id = n.__sn.id;\n    }\n    else {\n        id = genId();\n    }\n    var serializedNode = Object.assign(_serializedNode, { id: id });\n    n.__sn = serializedNode;\n    map[id] = n;\n    var recordChild = !skipChild;\n    if (serializedNode.type === NodeType.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n    }\n    if ((serializedNode.type === NodeType.Document ||\n        serializedNode.type === NodeType.Element) &&\n        recordChild) {\n        for (var _i = 0, _a = Array.from(n.childNodes); _i < _a.length; _i++) {\n            var childN = _a[_i];\n            var serializedChildNode = serializeNodeWithId(childN, doc, map, blockClass, skipChild, inlineStylesheet, maskInputOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n    }\n    return serializedNode;\n}\nfunction snapshot(n, blockClass, inlineStylesheet, maskAllInputsOrOptions) {\n    if (blockClass === void 0) { blockClass = 'rr-block'; }\n    if (inlineStylesheet === void 0) { inlineStylesheet = true; }\n    var idNodeMap = {};\n    var maskInputOptions = maskAllInputsOrOptions === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true\n        }\n        : maskAllInputsOrOptions === false\n            ? {}\n            : maskAllInputsOrOptions;\n    return [\n        serializeNodeWithId(n, n, idNodeMap, blockClass, false, inlineStylesheet, maskInputOptions),\n        idNodeMap,\n    ];\n}\n\nvar commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nfunction parse(css, options) {\n    if (options === void 0) { options = {}; }\n    var lineno = 1;\n    var column = 1;\n    function updatePosition(str) {\n        var lines = str.match(/\\n/g);\n        if (lines) {\n            lineno += lines.length;\n        }\n        var i = str.lastIndexOf('\\n');\n        column = i === -1 ? column + str.length : str.length - i;\n    }\n    function position() {\n        var start = { line: lineno, column: column };\n        return function (node) {\n            node.position = new Position(start);\n            whitespace();\n            return node;\n        };\n    }\n    var Position = (function () {\n        function Position(start) {\n            this.start = start;\n            this.end = { line: lineno, column: column };\n            this.source = options.source;\n        }\n        return Position;\n    }());\n    Position.prototype.content = css;\n    var errorsList = [];\n    function error(msg) {\n        var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n        err.reason = msg;\n        err.filename = options.source;\n        err.line = lineno;\n        err.column = column;\n        err.source = css;\n        if (options.silent) {\n            errorsList.push(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    function stylesheet() {\n        var rulesList = rules();\n        return {\n            type: 'stylesheet',\n            stylesheet: {\n                source: options.source,\n                rules: rulesList,\n                parsingErrors: errorsList\n            }\n        };\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n    function rules() {\n        var node;\n        var rules = [];\n        whitespace();\n        comments(rules);\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n            if (node !== false) {\n                rules.push(node);\n                comments(rules);\n            }\n        }\n        return rules;\n    }\n    function match(re) {\n        var m = re.exec(css);\n        if (!m) {\n            return;\n        }\n        var str = m[0];\n        updatePosition(str);\n        css = css.slice(str.length);\n        return m;\n    }\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function comments(rules) {\n        if (rules === void 0) { rules = []; }\n        var c;\n        while ((c = comment())) {\n            if (c !== false) {\n                rules.push(c);\n            }\n            c = comment();\n        }\n        return rules;\n    }\n    function comment() {\n        var pos = position();\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n            return;\n        }\n        var i = 2;\n        while ('' !== css.charAt(i) &&\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\n            ++i;\n        }\n        i += 2;\n        if ('' === css.charAt(i - 1)) {\n            return error('End of comment missing');\n        }\n        var str = css.slice(2, i - 2);\n        column += 2;\n        updatePosition(str);\n        css = css.slice(i);\n        column += 2;\n        return pos({\n            type: 'comment',\n            comment: str\n        });\n    }\n    function selector() {\n        var m = match(/^([^{]+)/);\n        if (!m) {\n            return;\n        }\n        return trim(m[0])\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function (m) {\n            return m.replace(/,/g, '\\u200C');\n        })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function (s) {\n            return s.replace(/\\u200C/g, ',');\n        });\n    }\n    function declaration() {\n        var pos = position();\n        var propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!propMatch) {\n            return;\n        }\n        var prop = trim(propMatch[0]);\n        if (!match(/^:\\s*/)) {\n            return error(\"property missing ':'\");\n        }\n        var val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n        var ret = pos({\n            type: 'declaration',\n            property: prop.replace(commentre, ''),\n            value: val ? trim(val[0]).replace(commentre, '') : ''\n        });\n        match(/^[;\\s]*/);\n        return ret;\n    }\n    function declarations() {\n        var decls = [];\n        if (!open()) {\n            return error(\"missing '{'\");\n        }\n        comments(decls);\n        var decl;\n        while ((decl = declaration())) {\n            if (decl !== false) {\n                decls.push(decl);\n                comments(decls);\n            }\n            decl = declaration();\n        }\n        if (!close()) {\n            return error(\"missing '}'\");\n        }\n        return decls;\n    }\n    function keyframe() {\n        var m;\n        var vals = [];\n        var pos = position();\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n        if (!vals.length) {\n            return;\n        }\n        return pos({\n            type: 'keyframe',\n            values: vals,\n            declarations: declarations()\n        });\n    }\n    function atkeyframes() {\n        var pos = position();\n        var m = match(/^@([-\\w]+)?keyframes\\s*/);\n        if (!m) {\n            return;\n        }\n        var vendor = m[1];\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n        var name = m[1];\n        if (!open()) {\n            return error(\"@keyframes missing '{'\");\n        }\n        var frame;\n        var frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n        if (!close()) {\n            return error(\"@keyframes missing '}'\");\n        }\n        return pos({\n            type: 'keyframes',\n            name: name,\n            vendor: vendor,\n            keyframes: frames\n        });\n    }\n    function atsupports() {\n        var pos = position();\n        var m = match(/^@supports *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        var supports = trim(m[1]);\n        if (!open()) {\n            return error(\"@supports missing '{'\");\n        }\n        var style = comments().concat(rules());\n        if (!close()) {\n            return error(\"@supports missing '}'\");\n        }\n        return pos({\n            type: 'supports',\n            supports: supports,\n            rules: style\n        });\n    }\n    function athost() {\n        var pos = position();\n        var m = match(/^@host\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(\"@host missing '{'\");\n        }\n        var style = comments().concat(rules());\n        if (!close()) {\n            return error(\"@host missing '}'\");\n        }\n        return pos({\n            type: 'host',\n            rules: style\n        });\n    }\n    function atmedia() {\n        var pos = position();\n        var m = match(/^@media *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        var media = trim(m[1]);\n        if (!open()) {\n            return error(\"@media missing '{'\");\n        }\n        var style = comments().concat(rules());\n        if (!close()) {\n            return error(\"@media missing '}'\");\n        }\n        return pos({\n            type: 'media',\n            media: media,\n            rules: style\n        });\n    }\n    function atcustommedia() {\n        var pos = position();\n        var m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (!m) {\n            return;\n        }\n        return pos({\n            type: 'custom-media',\n            name: trim(m[1]),\n            media: trim(m[2])\n        });\n    }\n    function atpage() {\n        var pos = position();\n        var m = match(/^@page */);\n        if (!m) {\n            return;\n        }\n        var sel = selector() || [];\n        if (!open()) {\n            return error(\"@page missing '{'\");\n        }\n        var decls = comments();\n        var decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(\"@page missing '}'\");\n        }\n        return pos({\n            type: 'page',\n            selectors: sel,\n            declarations: decls\n        });\n    }\n    function atdocument() {\n        var pos = position();\n        var m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        var vendor = trim(m[1]);\n        var doc = trim(m[2]);\n        if (!open()) {\n            return error(\"@document missing '{'\");\n        }\n        var style = comments().concat(rules());\n        if (!close()) {\n            return error(\"@document missing '}'\");\n        }\n        return pos({\n            type: 'document',\n            document: doc,\n            vendor: vendor,\n            rules: style\n        });\n    }\n    function atfontface() {\n        var pos = position();\n        var m = match(/^@font-face\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(\"@font-face missing '{'\");\n        }\n        var decls = comments();\n        var decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(\"@font-face missing '}'\");\n        }\n        return pos({\n            type: 'font-face',\n            declarations: decls\n        });\n    }\n    var atimport = _compileAtrule('import');\n    var atcharset = _compileAtrule('charset');\n    var atnamespace = _compileAtrule('namespace');\n    function _compileAtrule(name) {\n        var re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n        return function () {\n            var pos = position();\n            var m = match(re);\n            if (!m) {\n                return;\n            }\n            var ret = { type: name };\n            ret[name] = m[1].trim();\n            return pos(ret);\n        };\n    }\n    function atrule() {\n        if (css[0] !== '@') {\n            return;\n        }\n        return (atkeyframes() ||\n            atmedia() ||\n            atcustommedia() ||\n            atsupports() ||\n            atimport() ||\n            atcharset() ||\n            atnamespace() ||\n            atdocument() ||\n            atpage() ||\n            athost() ||\n            atfontface());\n    }\n    function rule() {\n        var pos = position();\n        var sel = selector();\n        if (!sel) {\n            return error('selector missing');\n        }\n        comments();\n        return pos({\n            type: 'rule',\n            selectors: sel,\n            declarations: declarations()\n        });\n    }\n    return addParent(stylesheet());\n}\nfunction trim(str) {\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\nfunction addParent(obj, parent) {\n    var isNode = obj && typeof obj.type === 'string';\n    var childParent = isNode ? obj : parent;\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n        var k = _a[_i];\n        var value = obj[k];\n        if (Array.isArray(value)) {\n            value.forEach(function (v) {\n                addParent(v, childParent);\n            });\n        }\n        else if (value && typeof value === 'object') {\n            addParent(value, childParent);\n        }\n    }\n    if (isNode) {\n        Object.defineProperty(obj, 'parent', {\n            configurable: true,\n            writable: true,\n            enumerable: false,\n            value: parent || null\n        });\n    }\n    return obj;\n}\n\nvar tagMap = {\n    script: 'noscript',\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    fedropshadow: 'feDropShadow',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient'\n};\nfunction getTagName(n) {\n    var tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n    if (tagName === 'link' && n.attributes._cssText) {\n        tagName = 'style';\n    }\n    return tagName;\n}\nvar HOVER_SELECTOR = /([^\\\\]):hover/g;\nfunction addHoverClass(cssText) {\n    var ast = parse(cssText, { silent: true });\n    if (!ast.stylesheet) {\n        return cssText;\n    }\n    ast.stylesheet.rules.forEach(function (rule) {\n        if ('selectors' in rule) {\n            (rule.selectors || []).forEach(function (selector) {\n                if (HOVER_SELECTOR.test(selector)) {\n                    var newSelector = selector.replace(HOVER_SELECTOR, '$1.\\\\:hover');\n                    cssText = cssText.replace(selector, selector + \", \" + newSelector);\n                }\n            });\n        }\n    });\n    return cssText;\n}\nfunction buildNode(n, doc, HACK_CSS) {\n    switch (n.type) {\n        case NodeType.Document:\n            return doc.implementation.createDocument(null, '', null);\n        case NodeType.DocumentType:\n            return doc.implementation.createDocumentType(n.name, n.publicId, n.systemId);\n        case NodeType.Element:\n            var tagName = getTagName(n);\n            var node_1;\n            if (n.isSVG) {\n                node_1 = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n            }\n            else {\n                node_1 = doc.createElement(tagName);\n            }\n            var _loop_1 = function (name) {\n                if (!n.attributes.hasOwnProperty(name)) {\n                    return \"continue\";\n                }\n                var value = n.attributes[name];\n                value = typeof value === 'boolean' ? '' : value;\n                if (!name.startsWith('rr_')) {\n                    var isTextarea = tagName === 'textarea' && name === 'value';\n                    var isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\n                    if (isRemoteOrDynamicCss && HACK_CSS) {\n                        value = addHoverClass(value);\n                    }\n                    if (isTextarea || isRemoteOrDynamicCss) {\n                        var child = doc.createTextNode(value);\n                        for (var _i = 0, _a = Array.from(node_1.childNodes); _i < _a.length; _i++) {\n                            var c = _a[_i];\n                            if (c.nodeType === node_1.TEXT_NODE) {\n                                node_1.removeChild(c);\n                            }\n                        }\n                        node_1.appendChild(child);\n                        return \"continue\";\n                    }\n                    if (tagName === 'iframe' && name === 'src') {\n                        return \"continue\";\n                    }\n                    try {\n                        if (n.isSVG && name === 'xlink:href') {\n                            node_1.setAttributeNS('http://www.w3.org/1999/xlink', name, value);\n                        }\n                        else if (name == 'onload' || name == 'onclick' || name.substring(0, 7) == 'onmouse') {\n                            node_1.setAttribute('_' + name, value);\n                        }\n                        else {\n                            node_1.setAttribute(name, value);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else {\n                    if (tagName === 'canvas' && name === 'rr_dataURL') {\n                        var image_1 = document.createElement('img');\n                        image_1.src = value;\n                        image_1.onload = function () {\n                            var ctx = node_1.getContext('2d');\n                            if (ctx) {\n                                ctx.drawImage(image_1, 0, 0, image_1.width, image_1.height);\n                            }\n                        };\n                    }\n                    if (name === 'rr_width') {\n                        node_1.style.width = value;\n                    }\n                    if (name === 'rr_height') {\n                        node_1.style.height = value;\n                    }\n                    if (name === 'rr_mediaState') {\n                        switch (value) {\n                            case 'played':\n                                node_1.play();\n                            case 'paused':\n                                node_1.pause();\n                                break;\n                            default:\n                        }\n                    }\n                }\n            };\n            for (var name in n.attributes) {\n                _loop_1(name);\n            }\n            return node_1;\n        case NodeType.Text:\n            return doc.createTextNode(n.isStyle && HACK_CSS ? addHoverClass(n.textContent) : n.textContent);\n        case NodeType.CDATA:\n            return doc.createCDATASection(n.textContent);\n        case NodeType.Comment:\n            return doc.createComment(n.textContent);\n        default:\n            return null;\n    }\n}\nfunction buildNodeWithSN(n, doc, map, skipChild, HACK_CSS) {\n    if (skipChild === void 0) { skipChild = false; }\n    if (HACK_CSS === void 0) { HACK_CSS = true; }\n    var node = buildNode(n, doc, HACK_CSS);\n    if (!node) {\n        return null;\n    }\n    if (n.type === NodeType.Document) {\n        doc.close();\n        doc.open();\n        node = doc;\n    }\n    node.__sn = n;\n    map[n.id] = node;\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\n        !skipChild) {\n        for (var _i = 0, _a = n.childNodes; _i < _a.length; _i++) {\n            var childN = _a[_i];\n            var childNode = buildNodeWithSN(childN, doc, map, false, HACK_CSS);\n            if (!childNode) {\n                console.warn('Failed to rebuild', childN);\n            }\n            else {\n                node.appendChild(childNode);\n            }\n        }\n    }\n    return node;\n}\nfunction rebuild(n, doc, HACK_CSS) {\n    if (HACK_CSS === void 0) { HACK_CSS = true; }\n    var idNodeMap = {};\n    return [buildNodeWithSN(n, doc, idNodeMap, false, HACK_CSS), idNodeMap];\n}\n\nexport { snapshot, serializeNodeWithId, rebuild, buildNodeWithSN, addHoverClass, transformAttribute, NodeType };\n","import {\n  serializedNodeWithId,\n  idNodeMap,\n  INode,\n  MaskInputOptions,\n} from 'rrweb-snapshot';\nimport { PackFn, UnpackFn } from './packer/base';\n\nexport enum EventType {\n  DomContentLoaded,\n  Load,\n  FullSnapshot,\n  IncrementalSnapshot,\n  Meta,\n  Custom,\n}\n\nexport type domContentLoadedEvent = {\n  type: EventType.DomContentLoaded;\n  data: {};\n};\n\nexport type loadedEvent = {\n  type: EventType.Load;\n  data: {};\n};\n\nexport type fullSnapshotEvent = {\n  type: EventType.FullSnapshot;\n  data: {\n    node: serializedNodeWithId;\n    initialOffset: {\n      top: number;\n      left: number;\n    };\n  };\n};\n\nexport type incrementalSnapshotEvent = {\n  type: EventType.IncrementalSnapshot;\n  data: incrementalData;\n};\n\nexport type metaEvent = {\n  type: EventType.Meta;\n  data: {\n    href: string;\n    width: number;\n    height: number;\n  };\n};\n\nexport type customEvent<T = unknown> = {\n  type: EventType.Custom;\n  data: {\n    tag: string;\n    payload: T;\n  };\n};\n\nexport type styleSheetEvent = {};\n\nexport enum IncrementalSource {\n  Mutation,\n  MouseMove,\n  MouseInteraction,\n  Scroll,\n  ViewportResize,\n  Input,\n  TouchMove,\n  MediaInteraction,\n  StyleSheetRule,\n}\n\nexport type mutationData = {\n  source: IncrementalSource.Mutation;\n} & mutationCallbackParam;\n\nexport type mousemoveData = {\n  source: IncrementalSource.MouseMove | IncrementalSource.TouchMove;\n  positions: mousePosition[];\n};\n\nexport type mouseInteractionData = {\n  source: IncrementalSource.MouseInteraction;\n} & mouseInteractionParam;\n\nexport type scrollData = {\n  source: IncrementalSource.Scroll;\n} & scrollPosition;\n\nexport type viewportResizeData = {\n  source: IncrementalSource.ViewportResize;\n} & viewportResizeDimention;\n\nexport type inputData = {\n  source: IncrementalSource.Input;\n  id: number;\n} & inputValue;\n\nexport type mediaInteractionData = {\n  source: IncrementalSource.MediaInteraction;\n} & mediaInteractionParam;\n\nexport type styleSheetRuleData = {\n  source: IncrementalSource.StyleSheetRule;\n} & styleSheetRuleParam;\n\nexport type incrementalData =\n  | mutationData\n  | mousemoveData\n  | mouseInteractionData\n  | scrollData\n  | viewportResizeData\n  | inputData\n  | mediaInteractionData\n  | styleSheetRuleData;\n\nexport type event =\n  | domContentLoadedEvent\n  | loadedEvent\n  | fullSnapshotEvent\n  | incrementalSnapshotEvent\n  | metaEvent\n  | customEvent;\n\nexport type eventWithTime = event & {\n  timestamp: number;\n  delay?: number;\n};\n\nexport type blockClass = string | RegExp;\n\nexport type SamplingStrategy = Partial<{\n  /**\n   * false means not to record mouse/touch move events\n   * number is the throttle threshold of recording mouse/touch move\n   */\n  mousemove: boolean | number;\n  /**\n   * false means not to record mouse interaction events\n   * can also specify record some kinds of mouse interactions\n   */\n  mouseInteraction: boolean | Record<string, boolean | undefined>;\n  /**\n   * number is the throttle threshold of recording scroll\n   */\n  scroll: number;\n  /**\n   * 'all' will record all the input events\n   * 'last' will only record the last input value while input a sequence of chars\n   */\n  input: 'all' | 'last';\n}>;\n\nexport type recordOptions<T> = {\n  emit?: (e: T, isCheckout?: boolean) => void;\n  checkoutEveryNth?: number;\n  checkoutEveryNms?: number;\n  blockClass?: blockClass;\n  ignoreClass?: string;\n  maskAllInputs?: boolean;\n  maskInputOptions?: MaskInputOptions;\n  inlineStylesheet?: boolean;\n  hooks?: hooksParam;\n  packFn?: PackFn;\n  sampling?: SamplingStrategy;\n  // departed, please use sampling options\n  mousemoveWait?: number;\n};\n\nexport type observerParam = {\n  mutationCb: mutationCallBack;\n  mousemoveCb: mousemoveCallBack;\n  mouseInteractionCb: mouseInteractionCallBack;\n  scrollCb: scrollCallback;\n  viewportResizeCb: viewportResizeCallback;\n  inputCb: inputCallback;\n  mediaInteractionCb: mediaInteractionCallback;\n  blockClass: blockClass;\n  ignoreClass: string;\n  maskInputOptions: MaskInputOptions;\n  inlineStylesheet: boolean;\n  styleSheetRuleCb: styleSheetRuleCallback;\n  sampling: SamplingStrategy;\n};\n\nexport type hooksParam = {\n  mutation?: mutationCallBack;\n  mousemove?: mousemoveCallBack;\n  mouseInteraction?: mouseInteractionCallBack;\n  scroll?: scrollCallback;\n  viewportResize?: viewportResizeCallback;\n  input?: inputCallback;\n  mediaInteaction?: mediaInteractionCallback;\n  styleSheetRule?: styleSheetRuleCallback;\n};\n\n// https://dom.spec.whatwg.org/#interface-mutationrecord\nexport type mutationRecord = {\n  type: string;\n  target: Node;\n  oldValue: string | null;\n  addedNodes: NodeList;\n  removedNodes: NodeList;\n  attributeName: string | null;\n};\n\nexport type textCursor = {\n  node: Node;\n  value: string | null;\n};\nexport type textMutation = {\n  id: number;\n  value: string | null;\n};\n\nexport type attributeCursor = {\n  node: Node;\n  attributes: {\n    [key: string]: string | null;\n  };\n};\nexport type attributeMutation = {\n  id: number;\n  attributes: {\n    [key: string]: string | null;\n  };\n};\n\nexport type removedNodeMutation = {\n  parentId: number;\n  id: number;\n};\n\nexport type addedNodeMutation = {\n  parentId: number;\n  // Newly recorded mutations will not have previousId any more, just for compatibility\n  previousId?: number | null;\n  nextId: number | null;\n  node: serializedNodeWithId;\n};\n\ntype mutationCallbackParam = {\n  texts: textMutation[];\n  attributes: attributeMutation[];\n  removes: removedNodeMutation[];\n  adds: addedNodeMutation[];\n};\n\nexport type mutationCallBack = (m: mutationCallbackParam) => void;\n\nexport type mousemoveCallBack = (\n  p: mousePosition[],\n  source: IncrementalSource.MouseMove | IncrementalSource.TouchMove,\n) => void;\n\nexport type mousePosition = {\n  x: number;\n  y: number;\n  id: number;\n  timeOffset: number;\n};\n\nexport enum MouseInteractions {\n  MouseUp,\n  MouseDown,\n  Click,\n  ContextMenu,\n  DblClick,\n  Focus,\n  Blur,\n  TouchStart,\n  TouchMove_Departed, // we will start a separate observer for touch move event\n  TouchEnd,\n}\n\ntype mouseInteractionParam = {\n  type: MouseInteractions;\n  id: number;\n  x: number;\n  y: number;\n};\n\nexport type mouseInteractionCallBack = (d: mouseInteractionParam) => void;\n\nexport type scrollPosition = {\n  id: number;\n  x: number;\n  y: number;\n};\n\nexport type scrollCallback = (p: scrollPosition) => void;\n\nexport type styleSheetAddRule = {\n  rule: string;\n  index?: number;\n};\n\nexport type styleSheetDeleteRule = {\n  index: number;\n};\n\nexport type styleSheetRuleParam = {\n  id: number;\n  removes?: styleSheetDeleteRule[];\n  adds?: styleSheetAddRule[];\n};\n\nexport type styleSheetRuleCallback = (s: styleSheetRuleParam) => void;\n\nexport type viewportResizeDimention = {\n  width: number;\n  height: number;\n};\n\nexport type viewportResizeCallback = (d: viewportResizeDimention) => void;\n\nexport type inputValue = {\n  text: string;\n  isChecked: boolean;\n};\n\nexport type inputCallback = (v: inputValue & { id: number }) => void;\n\nexport const enum MediaInteractions {\n  Play,\n  Pause,\n}\n\nexport type mediaInteractionParam = {\n  type: MediaInteractions;\n  id: number;\n};\n\nexport type mediaInteractionCallback = (p: mediaInteractionParam) => void;\n\nexport type Mirror = {\n  map: idNodeMap;\n  getId: (n: INode) => number;\n  getNode: (id: number) => INode | null;\n  removeNodeFromMap: (n: INode) => void;\n  has: (id: number) => boolean;\n};\n\nexport type throttleOptions = {\n  leading?: boolean;\n  trailing?: boolean;\n};\n\nexport type listenerHandler = () => void;\nexport type hookResetter = () => void;\n\nexport type playerConfig = {\n  speed: number;\n  root: Element;\n  loadTimeout: number;\n  skipInactive: boolean;\n  showWarning: boolean;\n  showDebug: boolean;\n  blockClass: string;\n  liveMode: boolean;\n  insertStyleRules: string[];\n  customStyles:string;\n  triggerFocus: boolean;\n  unpackFn?: UnpackFn;\n};\n\nexport type playerMetaData = {\n  startTime: number;\n  endTime: number;\n  totalTime: number;\n};\n\nexport type missingNode = {\n  node: Node;\n  mutation: addedNodeMutation;\n};\nexport type missingNodeMap = {\n  [id: number]: missingNode;\n};\n\nexport type actionWithDelay = {\n  doAction: () => void;\n  delay: number;\n};\n\nexport type Handler = (event?: unknown) => void;\n\nexport type Emitter = {\n  on(type: string, handler: Handler): void;\n  emit(type: string, event?: unknown): void;\n};\n\nexport type Arguments<T> = T extends (...payload: infer U) => unknown\n  ? U\n  : unknown;\n\nexport enum ReplayerEvents {\n  Start = 'start',\n  Pause = 'pause',\n  Resume = 'resume',\n  Resize = 'resize',\n  Finish = 'finish',\n  FullsnapshotRebuilded = 'fullsnapshot-rebuilded',\n  LoadStylesheetStart = 'load-stylesheet-start',\n  LoadStylesheetEnd = 'load-stylesheet-end',\n  SkipStart = 'skip-start',\n  SkipEnd = 'skip-end',\n  MouseInteraction = 'mouse-interaction',\n  EventCast = 'event-cast',\n  CustomEvent = 'custom-event',\n  Flush = 'flush',\n  StateChange = 'state-change',\n}\n","/* pako 1.0.11 nodeca/pako */(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.pako = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n},{}],2:[function(require,module,exports){\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n},{\"./common\":1}],3:[function(require,module,exports){\n'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n},{\"../utils/common\":1,\"./adler32\":3,\"./crc32\":4,\"./messages\":6,\"./trees\":7}],6:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n},{\"../utils/common\":1}],8:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n},{}],\"/lib/deflate.js\":[function(require,module,exports){\n'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n},{\"./utils/common\":1,\"./utils/strings\":2,\"./zlib/deflate\":5,\"./zlib/messages\":6,\"./zlib/zstream\":8}]},{},[])(\"/lib/deflate.js\")\n});\n","import { deflate } from 'pako/dist/pako_deflate';\nimport { PackFn, MARK, eventWithTimeAndPacker } from './base';\n\nexport const pack: PackFn = (event) => {\n  const _e: eventWithTimeAndPacker = {\n    ...event,\n    v: MARK,\n  };\n  return deflate(JSON.stringify(_e), { to: 'string' });\n};\n","import { eventWithTime } from '../types';\n\nexport type PackFn = (event: eventWithTime) => string;\nexport type UnpackFn = (raw: string) => eventWithTime;\n\nexport type eventWithTimeAndPacker = eventWithTime & {\n  v: string;\n};\n\nexport const MARK = 'v1';\n"],"names":["NodeType","EventType","IncrementalSource","MouseInteractions","MediaInteractions","ReplayerEvents","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","module","r","e","o","f","require","u","a","Error","code","exports","1","TYPED_OK","Uint8Array","Uint16Array","Int32Array","_has","obj","key","sources","Array","slice","source","shift","TypeError","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","flattenChunks","chunks","l","pos","chunk","result","fnUntyped","concat","setTyped","on","Buf8","Buf16","Buf32","2","utils","STR_APPLY_OK","STR_APPLY_UIA_OK","String","fromCharCode","__","_utf8len","q","buf2binstring","string2buf","str","c","c2","m_pos","str_len","buf_len","charCodeAt","binstring2buf","buf2string","max","out","c_len","utf16buf","utf8border","./common","3","adler","s1","s2","4","crcTable","table","k","makeTable","crc","end","5","configuration_table","trees","adler32","crc32","msg","err","strm","errorCode","rank","zero","flush_pending","state","pending","avail_out","output","pending_buf","pending_out","next_out","total_out","flush_block_only","last","_tr_flush_block","block_start","strstart","put_byte","b","putShortMSB","longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","window","wmask","w_mask","prev","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","m","more","start","_w_size","window_size","hash_size","head","avail_in","input","next_in","wrap","total_in","insert","ins_h","hash_shift","hash_mask","deflate_fast","flush","hash_head","bflush","match_length","_tr_tally","max_lazy_match","MIN_MATCH","last_lit","deflate_slow","max_insert","prev_match","strategy","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","DeflateState","status","pending_buf_size","gzhead","gzindex","method","last_flush","w_bits","hash_bits","level","dyn_ltree","HEAP_SIZE","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","data_type","_tr_init","deflateReset","ret","deflateInit2","windowBits","memLevel","max_block_size","max_start","deflateInit","deflateSetHeader","deflate","old_flush","beg","val","text","hcrc","extra","name","comment","time","os","header","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","deflateEnd","deflateSetDictionary","dictionary","avail","next","tmpDict","dictLength","deflateInfo","../utils/common","./adler32","./crc32","./messages","./trees","6","0","-1","-2","-3","-4","-5","-6","7","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","D_CODES","_dist_code","_length_code","MAX_MATCH","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","w","send_bits","value","send_code","tree","bi_reverse","res","gen_codes","bits","next_code","init_block","LITERALS","END_BLOCK","bi_windup","smaller","_n2","_m2","pqdownheap","v","j","compress_block","ltree","dtree","lc","lx","build_tree","desc","node","stree","h","xbits","base","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","stored_len","copy_block","LENGTH_CODES","L_CODES","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","BL_CODES","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","STATIC_TREES","bi_flush","8","/lib/deflate.js","zlib_deflate","strings","ZStream","toString","Deflate","options","chunkSize","to","opt","raw","gzip","ended","dict","_dict_set","deflator","push","data","mode","_mode","onEnd","onData","join","deflateRaw","./utils/common","./utils/strings","./zlib/deflate","./zlib/messages","./zlib/zstream","event","_e","JSON","stringify"],"mappings":"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"}